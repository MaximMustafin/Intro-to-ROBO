// Generated by gencpp from file custom_services/MeanThreeIntsResponse.msg
// DO NOT EDIT!


#ifndef CUSTOM_SERVICES_MESSAGE_MEANTHREEINTSRESPONSE_H
#define CUSTOM_SERVICES_MESSAGE_MEANTHREEINTSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_services
{
template <class ContainerAllocator>
struct MeanThreeIntsResponse_
{
  typedef MeanThreeIntsResponse_<ContainerAllocator> Type;

  MeanThreeIntsResponse_()
    : mean(0.0)  {
    }
  MeanThreeIntsResponse_(const ContainerAllocator& _alloc)
    : mean(0.0)  {
  (void)_alloc;
    }



   typedef double _mean_type;
  _mean_type mean;





  typedef boost::shared_ptr< ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MeanThreeIntsResponse_

typedef ::custom_services::MeanThreeIntsResponse_<std::allocator<void> > MeanThreeIntsResponse;

typedef boost::shared_ptr< ::custom_services::MeanThreeIntsResponse > MeanThreeIntsResponsePtr;
typedef boost::shared_ptr< ::custom_services::MeanThreeIntsResponse const> MeanThreeIntsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_services::MeanThreeIntsResponse_<ContainerAllocator1> & lhs, const ::custom_services::MeanThreeIntsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.mean == rhs.mean;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_services::MeanThreeIntsResponse_<ContainerAllocator1> & lhs, const ::custom_services::MeanThreeIntsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_services

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "553f1cf790d28bd4944c3f5348101e80";
  }

  static const char* value(const ::custom_services::MeanThreeIntsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x553f1cf790d28bd4ULL;
  static const uint64_t static_value2 = 0x944c3f5348101e80ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_services/MeanThreeIntsResponse";
  }

  static const char* value(const ::custom_services::MeanThreeIntsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 mean\n"
"\n"
;
  }

  static const char* value(const ::custom_services::MeanThreeIntsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mean);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MeanThreeIntsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_services::MeanThreeIntsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_services::MeanThreeIntsResponse_<ContainerAllocator>& v)
  {
    s << indent << "mean: ";
    Printer<double>::stream(s, indent + "  ", v.mean);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_SERVICES_MESSAGE_MEANTHREEINTSRESPONSE_H
